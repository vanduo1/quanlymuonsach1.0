const express = require("express");
const { client } = require("../config/db");
const { verifyToken, isLibrarian } = require("../middleware/auth");
const { ObjectId } = require("mongodb");

const router = express.Router();
const DB_NAME = "quanlymuonsach";

// L·∫•y danh s√°ch s√°ch v·ªõi filter v√† ph√¢n trang
router.get("/", async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const sachCollection = db.collection("sachs");

    const {
      search, // T√¨m ki·∫øm theo t√™n, t√°c gi·∫£
      theLoai, // Filter theo th·ªÉ lo·∫°i
      namXuatBan, // Filter theo nƒÉm xu·∫•t b·∫£n
      nhaXuatBan, // Filter theo nh√† xu·∫•t b·∫£n
      trangThai, // Filter theo tr·∫°ng th√°i (c√≤n/ƒë√£ m∆∞·ª£n h·∫øt)
      page = 1, // Trang hi·ªán t·∫°i
      limit = 10, // S·ªë s√°ch m·ªói trang
    } = req.query;

    // X√¢y d·ª±ng query
    const query = {};

    if (search) {
      query.$or = [
        { TenSach: { $regex: search, $options: "i" } },
        { TacGia: { $regex: search, $options: "i" } },
      ];
    }

    if (theLoai) {
      query.TheLoai = theLoai;
    }

    if (namXuatBan) {
      query.NamXuatBan = parseInt(namXuatBan);
    }

    if (nhaXuatBan) {
      query.NhaXuatBan = nhaXuatBan;
    }

    if (trangThai) {
      query.SoLuongCon = trangThai === "con" ? { $gt: 0 } : 0;
    }

    // Th·ª±c hi·ªán query v·ªõi ph√¢n trang
    const skip = (parseInt(page) - 1) * parseInt(limit);

    const [sachs, totalCount] = await Promise.all([
      sachCollection
        .find(query)
        .sort({ _id: -1 })
        .skip(skip)
        .limit(parseInt(limit))
        .toArray(),
      sachCollection.countDocuments(query),
    ]);

    // L·∫•y th√¥ng tin m∆∞·ª£n s√°ch
    const muonSachCollection = db.collection("muonsachs");
    const sachIds = sachs.map((sach) => sach.MaSach);
    const muonSachStats = await muonSachCollection
      .aggregate([
        { $match: { MaSach: { $in: sachIds } } },
        {
          $group: {
            _id: "$MaSach",
            soLuotMuon: { $sum: 1 },
          },
        },
      ])
      .toArray();

    // Map s·ªë l∆∞·ª£t m∆∞·ª£n v√†o k·∫øt qu·∫£
    const sachsWithStats = sachs.map((sach) => ({
      ...sach,
      SoLuotMuon:
        muonSachStats.find((stat) => stat._id === sach.MaSach)?.soLuotMuon || 0,
    }));

    res.json({
      sachs: sachsWithStats,
      totalCount,
      currentPage: parseInt(page),
      totalPages: Math.ceil(totalCount / parseInt(limit)),
    });
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch s√°ch:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// L·∫•y chi ti·∫øt s√°ch
router.get("/:id", async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const sachCollection = db.collection("sachs");
    const muonSachCollection = db.collection("muonsachs");

    const sach = await sachCollection.findOne({ MaSach: req.params.id });
    if (!sach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√°ch!" });
    }

    // L·∫•y th√¥ng tin m∆∞·ª£n s√°ch
    const muonSachStats = await muonSachCollection
      .aggregate([
        { $match: { MaSach: sach.MaSach } },
        {
          $group: {
            _id: "$MaSach",
            soLuotMuon: { $sum: 1 },
            dangMuon: {
              $sum: {
                $cond: [{ $eq: ["$TrangThai", "dang_muon"] }, 1, 0],
              },
            },
          },
        },
      ])
      .toArray();

    const stats = muonSachStats[0] || { soLuotMuon: 0, dangMuon: 0 };

    res.json({
      ...sach,
      SoLuotMuon: stats.soLuotMuon,
      SoLuongDangMuon: stats.dangMuon,
    });
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y chi ti·∫øt s√°ch:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// Th√™m s√°ch m·ªõi (ch·ªâ th·ªß th∆∞)
router.post("/", verifyToken, isLibrarian, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const sachCollection = db.collection("sachs");
    const {
      TenSach,
      TacGia,
      TheLoai,
      NhaXuatBan,
      MaNXB,
      NamXuatBan,
      SoLuong,
      GiaSach,
      MoTa,
      ISBN,
      HinhAnh,
    } = req.body;

    console.log("üìù D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!TenSach || !TacGia || !TheLoai || !NamXuatBan || !SoLuong) {
      return res.status(400).json({
        message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!",
      });
    }

    // Ki·ªÉm tra ISBN ƒë√£ t·ªìn t·∫°i
    if (ISBN) {
      const existingBook = await sachCollection.findOne({ ISBN });
      if (existingBook) {
        return res.status(400).json({ message: "ISBN ƒë√£ t·ªìn t·∫°i!" });
      }
    }

    // T·∫°o m√£ s√°ch m·ªõi - s·ª≠a c√°ch s·∫Øp x·∫øp
    const lastSach = await sachCollection
      .find({}, { MaSach: 1 })
      .sort({ _id: -1 })
      .limit(1)
      .toArray();

    let newMaSach = "MS0001";
    if (lastSach.length > 0 && lastSach[0].MaSach) {
      const lastId = parseInt(lastSach[0].MaSach.replace("MS", ""));
      newMaSach = `MS${String(lastId + 1).padStart(4, "0")}`;
    }

    // T·∫°o s√°ch m·ªõi
    const newSach = {
      MaSach: newMaSach,
      TenSach: TenSach.trim(),
      TacGia: TacGia.trim(),
      TheLoai: TheLoai.trim(),
      NhaXuatBan: NhaXuatBan || MaNXB || "",
      MaNXB: MaNXB || NhaXuatBan || "",
      NamXuatBan: parseInt(NamXuatBan),
      SoLuong: parseInt(SoLuong),
      SoLuongCon: parseInt(SoLuong),
      GiaSach: GiaSach ? parseInt(GiaSach) : 0,
      MoTa: MoTa || "",
      ISBN: ISBN || "",
      HinhAnh: HinhAnh || "",
      NgayThem: new Date(),
      TrangThai: "active",
    };

    console.log("üìö S√°ch m·ªõi ƒë∆∞·ª£c t·∫°o:", newSach);

    const result = await sachCollection.insertOne(newSach);

    res.status(201).json({
      message: "Th√™m s√°ch th√†nh c√¥ng!",
      MaSach: newMaSach,
      _id: result.insertedId,
    });
  } catch (err) {
    console.error("‚ùå L·ªói th√™m s√°ch:", err);
    res.status(500).json({
      message: "L·ªói m√°y ch·ªß!",
      error: err.message,
    });
  }
});

// C·∫≠p nh·∫≠t s√°ch (ch·ªâ th·ªß th∆∞)
router.put("/:id", verifyToken, isLibrarian, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const sachCollection = db.collection("sachs");
    const {
      TenSach,
      TacGia,
      TheLoai,
      NhaXuatBan,
      MaNXB,
      NamXuatBan,
      SoLuong,
      GiaSach,
      MoTa,
      ISBN,
      HinhAnh,
    } = req.body;

    console.log("üìù C·∫≠p nh·∫≠t s√°ch - ID:", req.params.id);
    console.log("üìù D·ªØ li·ªáu c·∫≠p nh·∫≠t:", req.body);

    // T√¨m s√°ch b·∫±ng c·∫£ MaSach v√† _id
    let sach = await sachCollection.findOne({ MaSach: req.params.id });
    if (!sach) {
      // Th·ª≠ t√¨m b·∫±ng _id
      try {
        sach = await sachCollection.findOne({
          _id: new ObjectId(req.params.id),
        });
      } catch (err) {
        console.log("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi _id:", err.message);
      }
    }

    if (!sach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√°ch!" });
    }

    // Ki·ªÉm tra ISBN ƒë√£ t·ªìn t·∫°i (n·∫øu thay ƒë·ªïi)
    if (ISBN && ISBN !== sach.ISBN) {
      const existingBook = await sachCollection.findOne({
        ISBN,
        MaSach: { $ne: sach.MaSach },
      });
      if (existingBook) {
        return res.status(400).json({ message: "ISBN ƒë√£ t·ªìn t·∫°i!" });
      }
    }

    // T√≠nh to√°n s·ªë l∆∞·ª£ng c√≤n l·∫°i m·ªõi
    const soLuongDangMuon = sach.SoLuong - sach.SoLuongCon;
    const soLuongMoi = parseInt(SoLuong);
    const soLuongConMoi = Math.max(0, soLuongMoi - soLuongDangMuon);

    // C·∫≠p nh·∫≠t th√¥ng tin
    const updateData = {
      TenSach: TenSach.trim(),
      TacGia: TacGia.trim(),
      TheLoai: TheLoai.trim(),
      NhaXuatBan: NhaXuatBan || MaNXB || "",
      MaNXB: MaNXB || NhaXuatBan || "",
      NamXuatBan: parseInt(NamXuatBan),
      SoLuong: soLuongMoi,
      SoLuongCon: soLuongConMoi,
      GiaSach: GiaSach ? parseInt(GiaSach) : sach.GiaSach || 0,
      MoTa: MoTa || "",
      ISBN: ISBN || "",
      HinhAnh: HinhAnh || "",
      NgayCapNhat: new Date(),
    };

    await sachCollection.updateOne(
      { MaSach: sach.MaSach },
      { $set: updateData }
    );

    res.json({ message: "C·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t s√°ch:", err);
    res.status(500).json({
      message: "L·ªói m√°y ch·ªß!",
      error: err.message,
    });
  }
});

// X√≥a s√°ch (ch·ªâ th·ªß th∆∞)
router.delete("/:id", verifyToken, isLibrarian, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const sachCollection = db.collection("sachs");
    const muonSachCollection = db.collection("muonsachs");

    console.log("üóëÔ∏è X√≥a s√°ch - ID:", req.params.id);

    // T√¨m s√°ch b·∫±ng c·∫£ MaSach v√† _id
    let sach = await sachCollection.findOne({ MaSach: req.params.id });
    if (!sach) {
      // Th·ª≠ t√¨m b·∫±ng _id
      try {
        sach = await sachCollection.findOne({
          _id: new ObjectId(req.params.id),
        });
      } catch (err) {
        console.log("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi _id:", err.message);
      }
    }

    if (!sach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√°ch!" });
    }

    // Ki·ªÉm tra s√°ch c√≥ ƒëang ƒë∆∞·ª£c m∆∞·ª£n kh√¥ng
    const dangMuon = await muonSachCollection.findOne({
      MaSach: sach.MaSach,
      TrangThai: "dang_muon",
    });

    if (dangMuon) {
      return res
        .status(400)
        .json({ message: "Kh√¥ng th·ªÉ x√≥a s√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n!" });
    }

    const result = await sachCollection.deleteOne({ MaSach: sach.MaSach });
    if (result.deletedCount === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√°ch ƒë·ªÉ x√≥a!" });
    }

    res.json({ message: "X√≥a s√°ch th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a s√°ch:", err);
    res.status(500).json({
      message: "L·ªói m√°y ch·ªß!",
      error: err.message,
    });
  }
});

module.exports = router;
