const express = require("express");
const { client } = require("../config/db");
const { verifyToken, isLibrarian } = require("../middleware/auth");

const router = express.Router();
const DB_NAME = "quanlymuonsach";

// API ƒë·ªÉ l·∫•y danh s√°ch s√°ch c√≥ th·ªÉ m∆∞·ª£n
router.get("/available-books", verifyToken, async (req, res) => {
  try {
    console.log("üîç API available-books ƒë∆∞·ª£c g·ªçi b·ªüi user:", req.user);
    const db = client.db(DB_NAME);
    const sachCollection = db.collection("sachs");

    const books = await sachCollection
      .find({
        SoLuongCon: { $gt: 0 },
      })
      .project({
        MaSach: 1,
        TenSach: 1,
        TacGia: 1,
        SoLuongCon: 1,
      })
      .sort({ TenSach: 1 })
      .toArray();

    console.log(`üìö T√¨m th·∫•y ${books.length} cu·ªën s√°ch c√≥ th·ªÉ m∆∞·ª£n`);
    res.json(books);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch s√°ch c√≥ th·ªÉ m∆∞·ª£n:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// API ƒë·ªÉ l·∫•y danh s√°ch ƒë·ªôc gi·∫£
router.get("/available-readers", verifyToken, isLibrarian, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const docGiaCollection = db.collection("docgias");

    const readers = await docGiaCollection
      .find({})
      .project({
        MaDocGia: 1,
        HoTen: 1,
        Email: 1,
      })
      .sort({ HoTen: 1 })
      .toArray();

    res.json(readers);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch ƒë·ªôc gi·∫£:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// L·∫•y danh s√°ch m∆∞·ª£n s√°ch v·ªõi filter v√† ph√¢n trang
router.get("/", verifyToken, async (req, res) => {
  try {
    console.log("üîç API theodoimuonsach ƒë∆∞·ª£c g·ªçi b·ªüi user:", req.user);
    const db = client.db(DB_NAME);
    const muonSachCollection = db.collection("muonsachs");
    const sachCollection = db.collection("sachs");
    const docGiaCollection = db.collection("docgias");

    const {
      search, // T√¨m ki·∫øm theo m√£ s√°ch, t√™n s√°ch, m√£ ƒë·ªôc gi·∫£
      trangThai, // Filter theo tr·∫°ng th√°i (ƒëang_muon, da_tra, qua_han)
      tuNgay, // Filter theo ng√†y m∆∞·ª£n
      denNgay,
      page = 1, // Trang hi·ªán t·∫°i
      limit = 10, // S·ªë b·∫£n ghi m·ªói trang
    } = req.query;

    // X√¢y d·ª±ng query
    const query = {};

    // N·∫øu l√† ƒë·ªôc gi·∫£, ch·ªâ xem ƒë∆∞·ª£c phi·∫øu m∆∞·ª£n c·ªßa m√¨nh
    if (req.user.role === "reader") {
      query.MaDocGia = req.user.userId;
      console.log(
        `üîç Reader filter: Looking for borrows with MaDocGia = ${req.user.userId}`
      );
    }

    if (search) {
      query.$or = [
        { MaSach: { $regex: search, $options: "i" } },
        { MaDocGia: { $regex: search, $options: "i" } },
      ];
    }

    if (trangThai) {
      if (trangThai === "qua_han") {
        query.TrangThai = "dang_muon";
        query.NgayHenTra = { $lt: new Date() };
      } else {
        query.TrangThai = trangThai;
      }
    }

    if (tuNgay) {
      query.NgayMuon = { $gte: new Date(tuNgay) };
    }

    if (denNgay) {
      query.NgayMuon = { ...query.NgayMuon, $lte: new Date(denNgay) };
    }

    // Th·ª±c hi·ªán query v·ªõi ph√¢n trang
    const skip = (parseInt(page) - 1) * parseInt(limit);

    console.log(`üîç Final query for borrows:`, JSON.stringify(query, null, 2));

    const [muonSachs, totalCount] = await Promise.all([
      muonSachCollection
        .find(query)
        .sort({ NgayMuon: -1 })
        .skip(skip)
        .limit(parseInt(limit))
        .toArray(),
      muonSachCollection.countDocuments(query),
    ]);

    console.log(
      `üìä Query result: ${totalCount} total, ${muonSachs.length} returned`
    );

    // L·∫•y th√¥ng tin s√°ch v√† ƒë·ªôc gi·∫£
    const sachIds = muonSachs.map((ms) => ms.MaSach);
    const docGiaIds = muonSachs.map((ms) => ms.MaDocGia);

    const [sachs, docGias] = await Promise.all([
      sachCollection.find({ MaSach: { $in: sachIds } }).toArray(),
      docGiaCollection.find({ MaDocGia: { $in: docGiaIds } }).toArray(),
    ]);

    // Map th√¥ng tin v√†o k·∫øt qu·∫£
    const muonSachsWithInfo = muonSachs.map((ms) => ({
      ...ms,
      ThongTinSach: sachs.find((s) => s.MaSach === ms.MaSach),
      ThongTinDocGia: docGias.find((dg) => dg.MaDocGia === ms.MaDocGia),
    }));

    res.json({
      muonSachs: muonSachsWithInfo,
      totalCount,
      currentPage: parseInt(page),
      totalPages: Math.ceil(totalCount / parseInt(limit)),
    });
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch m∆∞·ª£n s√°ch:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// T·∫°o phi·∫øu m∆∞·ª£n s√°ch m·ªõi
router.post("/", verifyToken, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const muonSachCollection = db.collection("muonsachs");
    const sachCollection = db.collection("sachs");
    const docGiaCollection = db.collection("docgias");

    const { MaSach, NgayHenTra } = req.body;
    let { MaDocGia } = req.body;

    // N·∫øu l√† ƒë·ªôc gi·∫£, t·ª± ƒë·ªông l·∫•y MaDocGia t·ª´ token
    if (req.user.role === "reader") {
      MaDocGia = req.user.userId; // S·ª≠ d·ª•ng userId t·ª´ token
    }

    // Ki·ªÉm tra quy·ªÅn: ch·ªâ th·ªß th∆∞ t·∫°o ƒë∆∞·ª£c phi·∫øu m∆∞·ª£n ho·∫∑c ƒë·ªôc gi·∫£ t·∫°o cho ch√≠nh m√¨nh
    if (req.user.role === "reader" && req.user.userId !== MaDocGia) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán!" });
    }

    // Ki·ªÉm tra s√°ch t·ªìn t·∫°i v√† c√≤n c√≥ th·ªÉ m∆∞·ª£n
    const sach = await sachCollection.findOne({ MaSach });
    if (!sach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√°ch!" });
    }
    if (sach.SoLuongCon <= 0) {
      return res.status(400).json({ message: "S√°ch ƒë√£ h·∫øt!" });
    }

    // Ki·ªÉm tra ƒë·ªôc gi·∫£ t·ªìn t·∫°i
    const docGia = await docGiaCollection.findOne({ MaDocGia });
    if (!docGia) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£!" });
    }

    // Ki·ªÉm tra ƒë·ªôc gi·∫£ c√≥ ƒëang m∆∞·ª£n qu√° nhi·ªÅu s√°ch kh√¥ng
    const dangMuon = await muonSachCollection.countDocuments({
      MaDocGia,
      TrangThai: "dang_muon",
    });
    if (dangMuon >= 3) {
      return res
        .status(400)
        .json({ message: "ƒê·ªôc gi·∫£ ƒë√£ m∆∞·ª£n t·ªëi ƒëa s·ªë s√°ch cho ph√©p!" });
    }

    // Ki·ªÉm tra ƒë·ªôc gi·∫£ c√≥ ƒëang m∆∞·ª£n s√°ch qu√° h·∫°n kh√¥ng
    const quaHan = await muonSachCollection.findOne({
      MaDocGia,
      TrangThai: "dang_muon",
      NgayHenTra: { $lt: new Date() },
    });
    if (quaHan) {
      return res
        .status(400)
        .json({ message: "ƒê·ªôc gi·∫£ ƒëang c√≥ s√°ch m∆∞·ª£n qu√° h·∫°n!" });
    }

    // T·∫°o m√£ m∆∞·ª£n s√°ch m·ªõi
    const lastMuonSach = await muonSachCollection
      .find()
      .sort({ MaMuon: -1 })
      .limit(1)
      .toArray();

    const lastId =
      lastMuonSach.length > 0 ? parseInt(lastMuonSach[0].MaMuon.slice(2)) : 0;
    const newMaMuon = `MS${String(lastId + 1).padStart(4, "0")}`;

    // T·∫°o phi·∫øu m∆∞·ª£n m·ªõi
    const newMuonSach = {
      MaMuon: newMaMuon,
      MaSach,
      MaDocGia,
      NgayMuon: new Date(),
      NgayHenTra: new Date(NgayHenTra),
      NgayTra: null,
      TrangThai: req.user.role === "reader" ? "cho_duyet" : "dang_muon",
      GhiChu: "",
    };

    await Promise.all([
      muonSachCollection.insertOne(newMuonSach),
      // N·∫øu th·ªß th∆∞ t·∫°o phi·∫øu, gi·∫£m s·ªë l∆∞·ª£ng s√°ch ngay
      req.user.role === "librarian"
        ? sachCollection.updateOne({ MaSach }, { $inc: { SoLuongCon: -1 } })
        : Promise.resolve(),
    ]);

    res.status(201).json({
      message:
        req.user.role === "reader"
          ? "G·ª≠i y√™u c·∫ßu m∆∞·ª£n s√°ch th√†nh c√¥ng!"
          : "T·∫°o phi·∫øu m∆∞·ª£n th√†nh c√¥ng!",
      MaMuon: newMaMuon,
    });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o phi·∫øu m∆∞·ª£n:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// Duy·ªát y√™u c·∫ßu m∆∞·ª£n s√°ch (ch·ªâ th·ªß th∆∞)
router.put("/:id/duyet", verifyToken, isLibrarian, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const muonSachCollection = db.collection("muonsachs");
    const sachCollection = db.collection("sachs");

    const muonSach = await muonSachCollection.findOne({
      MaMuon: req.params.id,
    });
    if (!muonSach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n!" });
    }

    if (muonSach.TrangThai !== "cho_duyet") {
      return res
        .status(400)
        .json({ message: "Phi·∫øu m∆∞·ª£n kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù duy·ªát!" });
    }

    // Ki·ªÉm tra s√°ch c√≤n c√≥ th·ªÉ m∆∞·ª£n
    const sach = await sachCollection.findOne({ MaSach: muonSach.MaSach });
    if (sach.SoLuongCon <= 0) {
      return res.status(400).json({ message: "S√°ch ƒë√£ h·∫øt!" });
    }

    await Promise.all([
      muonSachCollection.updateOne(
        { MaMuon: req.params.id },
        { $set: { TrangThai: "dang_muon" } }
      ),
      sachCollection.updateOne(
        { MaSach: muonSach.MaSach },
        { $inc: { SoLuongCon: -1 } }
      ),
    ]);

    res.json({ message: "Duy·ªát y√™u c·∫ßu m∆∞·ª£n s√°ch th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói duy·ªát y√™u c·∫ßu m∆∞·ª£n:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// T·ª´ ch·ªëi y√™u c·∫ßu m∆∞·ª£n s√°ch (ch·ªâ th·ªß th∆∞)
router.put("/:id/tu-choi", verifyToken, isLibrarian, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const muonSachCollection = db.collection("muonsachs");

    const { lyDo } = req.body;
    const muonSach = await muonSachCollection.findOne({
      MaMuon: req.params.id,
    });

    if (!muonSach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n!" });
    }

    if (muonSach.TrangThai !== "cho_duyet") {
      return res
        .status(400)
        .json({ message: "Phi·∫øu m∆∞·ª£n kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù duy·ªát!" });
    }

    await muonSachCollection.updateOne(
      { MaMuon: req.params.id },
      {
        $set: {
          TrangThai: "tu_choi",
          GhiChu: lyDo || "Kh√¥ng c√≥ l√Ω do",
        },
      }
    );

    res.json({ message: "T·ª´ ch·ªëi y√™u c·∫ßu m∆∞·ª£n s√°ch th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói t·ª´ ch·ªëi y√™u c·∫ßu m∆∞·ª£n:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// Tr·∫£ s√°ch (ch·ªâ th·ªß th∆∞)
router.put("/:id/tra", verifyToken, isLibrarian, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const muonSachCollection = db.collection("muonsachs");
    const sachCollection = db.collection("sachs");

    const muonSach = await muonSachCollection.findOne({
      MaMuon: req.params.id,
    });
    if (!muonSach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n!" });
    }

    if (muonSach.TrangThai !== "dang_muon") {
      return res
        .status(400)
        .json({ message: "Phi·∫øu m∆∞·ª£n kh√¥ng ·ªü tr·∫°ng th√°i ƒëang m∆∞·ª£n!" });
    }

    await Promise.all([
      muonSachCollection.updateOne(
        { MaMuon: req.params.id },
        {
          $set: {
            TrangThai: "da_tra",
            NgayTra: new Date(),
          },
        }
      ),
      sachCollection.updateOne(
        { MaSach: muonSach.MaSach },
        { $inc: { SoLuongCon: 1 } }
      ),
    ]);

    res.json({ message: "Tr·∫£ s√°ch th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói tr·∫£ s√°ch:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// Gia h·∫°n m∆∞·ª£n s√°ch
router.put("/:id/gia-han", verifyToken, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const muonSachCollection = db.collection("muonsachs");
    const { NgayHenTra } = req.body;

    const muonSach = await muonSachCollection.findOne({
      MaMuon: req.params.id,
    });
    if (!muonSach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n!" });
    }

    // Ki·ªÉm tra quy·ªÅn: ch·ªâ th·ªß th∆∞ ho·∫∑c ch√≠nh ƒë·ªôc gi·∫£ m∆∞·ª£n s√°ch m·ªõi ƒë∆∞·ª£c gia h·∫°n
    if (req.user.role === "reader" && req.user.userId !== muonSach.MaDocGia) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán!" });
    }

    if (muonSach.TrangThai !== "dang_muon") {
      return res
        .status(400)
        .json({ message: "Phi·∫øu m∆∞·ª£n kh√¥ng ·ªü tr·∫°ng th√°i ƒëang m∆∞·ª£n!" });
    }

    // Ki·ªÉm tra ƒë√£ qu√° h·∫°n ch∆∞a
    if (new Date(muonSach.NgayHenTra) < new Date()) {
      return res
        .status(400)
        .json({ message: "Kh√¥ng th·ªÉ gia h·∫°n s√°ch ƒë√£ qu√° h·∫°n!" });
    }

    // N·∫øu l√† ƒë·ªôc gi·∫£ y√™u c·∫ßu gia h·∫°n
    if (req.user.role === "reader") {
      await muonSachCollection.updateOne(
        { MaMuon: req.params.id },
        {
          $set: {
            TrangThai: "cho_gia_han",
            NgayHenTraMoi: new Date(NgayHenTra),
          },
        }
      );

      res.json({ message: "G·ª≠i y√™u c·∫ßu gia h·∫°n th√†nh c√¥ng!" });
    }
    // N·∫øu l√† th·ªß th∆∞ th·ª±c hi·ªán gia h·∫°n
    else {
      await muonSachCollection.updateOne(
        { MaMuon: req.params.id },
        {
          $set: {
            NgayHenTra: new Date(NgayHenTra),
            TrangThai: "dang_muon",
          },
        }
      );

      res.json({ message: "Gia h·∫°n m∆∞·ª£n s√°ch th√†nh c√¥ng!" });
    }
  } catch (err) {
    console.error("‚ùå L·ªói gia h·∫°n m∆∞·ª£n s√°ch:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// Duy·ªát y√™u c·∫ßu gia h·∫°n (ch·ªâ th·ªß th∆∞)
router.put("/:id/duyet-gia-han", verifyToken, isLibrarian, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const muonSachCollection = db.collection("muonsachs");

    const muonSach = await muonSachCollection.findOne({
      MaMuon: req.params.id,
    });
    if (!muonSach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n!" });
    }

    if (muonSach.TrangThai !== "cho_gia_han") {
      return res
        .status(400)
        .json({ message: "Phi·∫øu m∆∞·ª£n kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù gia h·∫°n!" });
    }

    await muonSachCollection.updateOne(
      { MaMuon: req.params.id },
      {
        $set: {
          NgayHenTra: muonSach.NgayHenTraMoi,
          TrangThai: "dang_muon",
        },
        $unset: { NgayHenTraMoi: "" },
      }
    );

    res.json({ message: "Duy·ªát gia h·∫°n th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói duy·ªát gia h·∫°n:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// T·ª´ ch·ªëi y√™u c·∫ßu gia h·∫°n (ch·ªâ th·ªß th∆∞)
router.put(
  "/:id/tu-choi-gia-han",
  verifyToken,
  isLibrarian,
  async (req, res) => {
    try {
      const db = client.db(DB_NAME);
      const muonSachCollection = db.collection("muonsachs");

      const { lyDo } = req.body;
      const muonSach = await muonSachCollection.findOne({
        MaMuon: req.params.id,
      });

      if (!muonSach) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n!" });
      }

      if (muonSach.TrangThai !== "cho_gia_han") {
        return res
          .status(400)
          .json({ message: "Phi·∫øu m∆∞·ª£n kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù gia h·∫°n!" });
      }

      await muonSachCollection.updateOne(
        { MaMuon: req.params.id },
        {
          $set: {
            TrangThai: "dang_muon",
            GhiChu: lyDo || "Kh√¥ng c√≥ l√Ω do",
          },
          $unset: { NgayHenTraMoi: "" },
        }
      );

      res.json({ message: "T·ª´ ch·ªëi gia h·∫°n th√†nh c√¥ng!" });
    } catch (err) {
      console.error("‚ùå L·ªói t·ª´ ch·ªëi gia h·∫°n:", err);
      res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
  }
);

// H·ªßy phi·∫øu m∆∞·ª£n s√°ch (ƒë·ªôc gi·∫£ c√≥ th·ªÉ h·ªßy phi·∫øu ch·ªù duy·ªát c·ªßa m√¨nh)
router.put("/:id/huy", verifyToken, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const muonSachCollection = db.collection("muonsachs");
    const sachCollection = db.collection("sachs");

    const muonSach = await muonSachCollection.findOne({
      MaMuon: req.params.id,
    });

    if (!muonSach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n!" });
    }

    // Ki·ªÉm tra quy·ªÅn: ch·ªâ ƒë·ªôc gi·∫£ t·∫°o phi·∫øu ho·∫∑c th·ªß th∆∞ m·ªõi ƒë∆∞·ª£c h·ªßy
    if (req.user.role === "reader" && req.user.userId !== muonSach.MaDocGia) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán!" });
    }

    // Ch·ªâ cho ph√©p h·ªßy phi·∫øu ·ªü tr·∫°ng th√°i ch·ªù duy·ªát ho·∫∑c ch·ªù gia h·∫°n
    if (!["cho_duyet", "cho_gia_han"].includes(muonSach.TrangThai)) {
      return res.status(400).json({
        message:
          "Ch·ªâ c√≥ th·ªÉ h·ªßy phi·∫øu m∆∞·ª£n ·ªü tr·∫°ng th√°i ch·ªù duy·ªát ho·∫∑c ch·ªù gia h·∫°n!",
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu m∆∞·ª£n th√†nh "da_huy"
    await muonSachCollection.updateOne(
      { MaMuon: req.params.id },
      {
        $set: {
          TrangThai: "da_huy",
          NgayHuy: new Date(),
          LyDoHuy:
            req.user.role === "reader" ? "ƒê·ªôc gi·∫£ h·ªßy y√™u c·∫ßu" : "Th·ªß th∆∞ h·ªßy",
        },
        $unset: { NgayHenTraMoi: "" }, // X√≥a ng√†y h·∫πn tr·∫£ m·ªõi n·∫øu c√≥
      }
    );

    res.json({
      message:
        req.user.role === "reader"
          ? "H·ªßy y√™u c·∫ßu m∆∞·ª£n s√°ch th√†nh c√¥ng!"
          : "H·ªßy phi·∫øu m∆∞·ª£n th√†nh c√¥ng!",
    });
  } catch (err) {
    console.error("‚ùå L·ªói h·ªßy phi·∫øu m∆∞·ª£n:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

module.exports = router;
