const express = require("express");
const { client } = require("../config/db");
const { verifyToken } = require("../middleware/auth");
const { ObjectId } = require("mongodb");

const router = express.Router();
const DB_NAME = "quanlymuonsach";

// L·∫•y danh s√°ch ƒë·∫∑t s√°ch v·ªõi filter v√† ph√¢n trang
router.get("/", verifyToken, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const datSachCollection = db.collection("datsachs");
    const sachCollection = db.collection("sachs");
    const docGiaCollection = db.collection("docgias");

    const {
      search, // T√¨m ki·∫øm theo m√£ s√°ch, t√™n s√°ch, m√£ ƒë·ªôc gi·∫£
      trangThai, // Filter theo tr·∫°ng th√°i
      tuNgay, // Filter theo ng√†y ƒë·∫∑t
      denNgay,
      page = 1, // Trang hi·ªán t·∫°i
      limit = 10, // S·ªë b·∫£n ghi m·ªói trang
    } = req.query;

    // X√¢y d·ª±ng query
    const query = {};

    // N·∫øu l√† ƒë·ªôc gi·∫£, ch·ªâ xem ƒë∆∞·ª£c phi·∫øu ƒë·∫∑t c·ªßa m√¨nh
    if (req.user.role === "reader") {
      query.MaDocGia = req.user.userId;
      console.log(
        `üîç Reader filter for datsach: Looking for reservations with MaDocGia = ${req.user.userId}`
      );
    }

    if (search) {
      query.$or = [
        { MaSach: { $regex: search, $options: "i" } },
        { MaDocGia: { $regex: search, $options: "i" } },
      ];
    }

    if (trangThai) {
      query.TrangThai = trangThai;
    }

    if (tuNgay) {
      query.NgayDat = { $gte: new Date(tuNgay) };
    }

    if (denNgay) {
      query.NgayDat = { ...query.NgayDat, $lte: new Date(denNgay) };
    }

    // Th·ª±c hi·ªán query v·ªõi ph√¢n trang
    const skip = (parseInt(page) - 1) * parseInt(limit);

    const [datSachs, totalCount] = await Promise.all([
      datSachCollection
        .find(query)
        .sort({ NgayDat: -1 })
        .skip(skip)
        .limit(parseInt(limit))
        .toArray(),
      datSachCollection.countDocuments(query),
    ]);

    // L·∫•y th√¥ng tin s√°ch v√† ƒë·ªôc gi·∫£
    const sachIds = datSachs.map((ds) => ds.MaSach);
    const docGiaIds = datSachs.map((ds) => ds.MaDocGia);

    const [sachs, docGias] = await Promise.all([
      sachCollection.find({ MaSach: { $in: sachIds } }).toArray(),
      docGiaCollection.find({ MaDocGia: { $in: docGiaIds } }).toArray(),
    ]);

    // Map th√¥ng tin v√†o k·∫øt qu·∫£
    const datSachsWithInfo = datSachs.map((ds) => ({
      ...ds,
      ThongTinSach: sachs.find((s) => s.MaSach === ds.MaSach),
      ThongTinDocGia: docGias.find((dg) => dg.MaDocGia === ds.MaDocGia),
    }));

    res.json({
      datSachs: datSachsWithInfo,
      totalCount,
      currentPage: parseInt(page),
      totalPages: Math.ceil(totalCount / parseInt(limit)),
    });
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch ƒë·∫∑t s√°ch:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// T·∫°o phi·∫øu ƒë·∫∑t s√°ch m·ªõi
router.post("/", verifyToken, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const datSachCollection = db.collection("datsachs");
    const sachCollection = db.collection("sachs");
    const docGiaCollection = db.collection("docgias");

    const { MaSach, SoLuong, TrangThai, GhiChu } = req.body;

    console.log("Debug - User info:", {
      userFromRequest: req.user,
      reqBody: req.body,
    });

    // Ki·ªÉm tra quy·ªÅn ng∆∞·ªùi d√πng
    if (req.user.role !== "reader") {
      return res
        .status(403)
        .json({ message: "Ch·ªâ ƒë·ªôc gi·∫£ m·ªõi c√≥ th·ªÉ ƒë·∫∑t s√°ch!" });
    }

    // Ki·ªÉm tra th√¥ng tin ƒë·ªôc gi·∫£ - d√πng userId t·ª´ token
    const MaDocGia = req.user.userId; // L·∫•y t·ª´ JWT token
    let docGia = await docGiaCollection.findOne({
      MaDocGia: MaDocGia,
    });

    console.log("Debug - Found DocGia:", docGia);

    if (!docGia) {
      return res.status(404).json({
        message:
          "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªôc gi·∫£! Vui l√≤ng ki·ªÉm tra l·∫°i ƒëƒÉng nh·∫≠p.",
      });
    }

    // S·ª≠ d·ª•ng MaDocGia t·ª´ th√¥ng tin ƒë·ªôc gi·∫£ t√¨m ƒë∆∞·ª£c
    const maDocGiaToUse = docGia.MaDocGia || docGia._id;

    // Ki·ªÉm tra th√¥ng tin s√°ch
    const sach = await sachCollection.findOne({ MaSach: MaSach });
    if (!sach) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin s√°ch!" });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng s√°ch n·∫øu l√† m∆∞·ª£n tr·ª±c ti·∫øp
    if (TrangThai === "cho_duyet" && sach.SoLuong < SoLuong) {
      return res
        .status(400)
        .json({ message: "S·ªë l∆∞·ª£ng s√°ch kh√¥ng ƒë·ªß ƒë·ªÉ m∆∞·ª£n!" });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng s√°ch ƒëang m∆∞·ª£n c·ªßa ƒë·ªôc gi·∫£
    const muonSachCollection = db.collection("muonsachs");
    const dangMuon = await muonSachCollection.countDocuments({
      MaDocGia: maDocGiaToUse,
      TrangThai: "dang_muon",
    });

    if (dangMuon >= 3) {
      return res.status(400).json({
        message:
          "B·∫°n ƒë√£ m∆∞·ª£n t·ªëi ƒëa 3 cu·ªën s√°ch! Vui l√≤ng tr·∫£ s√°ch tr∆∞·ªõc khi m∆∞·ª£n th√™m.",
      });
    }

    // Ki·ªÉm tra n·∫øu ƒë·ªôc gi·∫£ ƒë√£ ƒë·∫∑t/m∆∞·ª£n s√°ch n√†y tr∆∞·ªõc ƒë√≥
    const existingRequest = await datSachCollection.findOne({
      MaDocGia: maDocGiaToUse,
      MaSach: MaSach,
      TrangThai: { $in: ["cho_duyet", "dat_cho"] },
    });

    if (existingRequest) {
      return res.status(400).json({
        message: "B·∫°n ƒë√£ c√≥ y√™u c·∫ßu m∆∞·ª£n/ƒë·∫∑t cho cu·ªën s√°ch n√†y!",
      });
    }

    // T·∫°o m√£ ƒë·∫∑t s√°ch t·ª± ƒë·ªông
    const lastReservation = await datSachCollection.findOne(
      {},
      { sort: { MaDat: -1 } }
    );

    let nextMaDat = "DS001";
    if (lastReservation && lastReservation.MaDat) {
      const lastNumber = parseInt(lastReservation.MaDat.substring(2));
      nextMaDat = `DS${String(lastNumber + 1).padStart(3, "0")}`;
    }

    // T·∫°o phi·∫øu ƒë·∫∑t s√°ch
    const datSach = {
      MaDat: nextMaDat,
      MaSach: MaSach,
      MaDocGia: maDocGiaToUse,
      SoLuong,
      TrangThai,
      NgayDat: new Date(),
      GhiChu,
    };

    const result = await datSachCollection.insertOne(datSach);

    // N·∫øu l√† m∆∞·ª£n tr·ª±c ti·∫øp, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s√°ch
    if (TrangThai === "cho_duyet") {
      await sachCollection.updateOne(
        { MaSach: MaSach },
        { $inc: { SoLuong: -SoLuong } }
      );
    }

    res.status(201).json({
      message:
        TrangThai === "cho_duyet"
          ? "Y√™u c·∫ßu m∆∞·ª£n s√°ch ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!"
          : "ƒê·∫∑t ch·ªó th√†nh c√¥ng!",
      datSach: { ...datSach, _id: result.insertedId },
      maDat: nextMaDat,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o phi·∫øu ƒë·∫∑t s√°ch:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// C·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu ƒë·∫∑t s√°ch (duy·ªát/h·ªßy)
router.patch("/:id", verifyToken, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const datSachCollection = db.collection("datsachs");
    const sachCollection = db.collection("sachs");
    const muonSachCollection = db.collection("muonsachs");

    const { id } = req.params;
    const { TrangThai, GhiChu } = req.body;

    const datSach = await datSachCollection.findOne({ _id: new ObjectId(id) });
    if (!datSach) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu ƒë·∫∑t s√°ch!" });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu ƒë·∫∑t
    await datSachCollection.updateOne(
      { _id: new ObjectId(id) },
      {
        $set: {
          TrangThai,
          GhiChu,
          NgayCapNhat: new Date(),
        },
      }
    );

    // X·ª≠ l√Ω theo tr·∫°ng th√°i
    switch (TrangThai) {
      case "da_duyet":
        // T·∫°o phi·∫øu m∆∞·ª£n s√°ch
        await muonSachCollection.insertOne({
          MaSach: datSach.MaSach,
          MaDocGia: datSach.MaDocGia,
          SoLuong: datSach.SoLuong,
          NgayMuon: new Date(),
          NgayHenTra: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 ng√†y
          TrangThai: "dang_muon",
          GhiChu: "T·∫°o t·ª´ phi·∫øu ƒë·∫∑t s√°ch",
        });

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s√°ch n·∫øu l√† ƒë·∫∑t ch·ªó tr∆∞·ªõc
        if (datSach.TrangThai === "dat_cho") {
          await sachCollection.updateOne(
            { _id: new ObjectId(datSach.MaSach) },
            { $inc: { SoLuong: -datSach.SoLuong } }
          );
        }
        break;

      case "da_huy":
        // Ho√†n tr·∫£ s·ªë l∆∞·ª£ng s√°ch n·∫øu l√† m∆∞·ª£n tr·ª±c ti·∫øp b·ªã h·ªßy
        if (datSach.TrangThai === "cho_duyet") {
          await sachCollection.updateOne(
            { _id: new ObjectId(datSach.MaSach) },
            { $inc: { SoLuong: datSach.SoLuong } }
          );
        }
        break;
    }

    res.json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t phi·∫øu ƒë·∫∑t s√°ch:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// Duy·ªát y√™u c·∫ßu ƒë·∫∑t s√°ch (ch·ªâ th·ªß th∆∞)
router.put("/:id/duyet", verifyToken, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const datSachCollection = db.collection("datsachs");

    const datSach = await datSachCollection.findOne({ MaDat: req.params.id });
    if (!datSach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu ƒë·∫∑t!" });
    }

    if (datSach.TrangThai !== "cho_duyet") {
      return res
        .status(400)
        .json({ message: "Phi·∫øu ƒë·∫∑t kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù duy·ªát!" });
    }

    await datSachCollection.updateOne(
      { MaDat: req.params.id },
      { $set: { TrangThai: "da_duyet" } }
    );

    res.json({ message: "Duy·ªát y√™u c·∫ßu ƒë·∫∑t s√°ch th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói duy·ªát y√™u c·∫ßu ƒë·∫∑t:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// T·ª´ ch·ªëi y√™u c·∫ßu ƒë·∫∑t s√°ch (ch·ªâ th·ªß th∆∞)
router.put("/:id/tu-choi", verifyToken, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const datSachCollection = db.collection("datsachs");

    const { lyDo } = req.body;
    const datSach = await datSachCollection.findOne({ MaDat: req.params.id });

    if (!datSach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu ƒë·∫∑t!" });
    }

    if (datSach.TrangThai !== "cho_duyet") {
      return res
        .status(400)
        .json({ message: "Phi·∫øu ƒë·∫∑t kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù duy·ªát!" });
    }

    await datSachCollection.updateOne(
      { MaDat: req.params.id },
      {
        $set: {
          TrangThai: "da_huy",
          GhiChu: lyDo || "T·ª´ ch·ªëi b·ªüi th·ªß th∆∞",
          NgayHuy: new Date(),
          NguoiHuy: "th·ªß th∆∞",
        },
      }
    );

    res.json({ message: "T·ª´ ch·ªëi y√™u c·∫ßu ƒë·∫∑t s√°ch th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói t·ª´ ch·ªëi y√™u c·∫ßu ƒë·∫∑t:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
});

// H·ªßy ƒë·∫∑t s√°ch
router.put("/:id/huy", verifyToken, async (req, res) => {
  try {
    const db = client.db(DB_NAME);
    const datSachCollection = db.collection("datsachs");
    const sachCollection = db.collection("sachs");
    const muonSachCollection = db.collection("muonsachs");

    console.log(`üîç T√¨m phi·∫øu ƒë·∫∑t v·ªõi MaDat: ${req.params.id}`);
    const datSach = await datSachCollection.findOne({ MaDat: req.params.id });
    if (!datSach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu ƒë·∫∑t!" });
    }

    console.log("üìã Th√¥ng tin phi·∫øu ƒë·∫∑t:", {
      MaDat: datSach.MaDat,
      MaDocGia: datSach.MaDocGia,
      TrangThai: datSach.TrangThai,
      userInfo: { userId: req.user.userId, role: req.user.role },
    });

    // Ki·ªÉm tra quy·ªÅn: ch·ªâ th·ªß th∆∞ ho·∫∑c ch√≠nh ƒë·ªôc gi·∫£ ƒë·∫∑t s√°ch m·ªõi ƒë∆∞·ª£c h·ªßy
    if (req.user.role === "reader" && req.user.userId !== datSach.MaDocGia) {
      console.log("‚ùå Kh√¥ng c√≥ quy·ªÅn h·ªßy phi·∫øu ƒë·∫∑t c·ªßa ng∆∞·ªùi kh√°c");
      return res
        .status(403)
        .json({ message: "B·∫°n ch·ªâ c√≥ th·ªÉ h·ªßy phi·∫øu ƒë·∫∑t c·ªßa ch√≠nh m√¨nh!" });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i c√≥ th·ªÉ h·ªßy
    if (!["cho_duyet", "da_duyet", "dat_cho"].includes(datSach.TrangThai)) {
      return res.status(400).json({
        message: "Kh√¥ng th·ªÉ h·ªßy phi·∫øu ƒë·∫∑t ·ªü tr·∫°ng th√°i n√†y!",
        currentStatus: datSach.TrangThai,
      });
    }

    // N·∫øu phi·∫øu ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c duy·ªát, ki·ªÉm tra xem c√≥ phi·∫øu m∆∞·ª£n t∆∞∆°ng ·ª©ng ch∆∞a
    if (datSach.TrangThai === "da_duyet") {
      const existingBorrow = await muonSachCollection.findOne({
        MaDocGia: datSach.MaDocGia,
        MaSach: datSach.MaSach,
        TrangThai: "dang_muon",
      });

      if (existingBorrow) {
        return res.status(400).json({
          message:
            "Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t s√°ch v√¨ s√°ch ƒë√£ ƒë∆∞·ª£c m∆∞·ª£n! Vui l√≤ng tr·∫£ s√°ch tr∆∞·ªõc.",
        });
      }
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu ƒë·∫∑t
    const updateResult = await datSachCollection.updateOne(
      { MaDat: req.params.id },
      {
        $set: {
          TrangThai: "da_huy",
          NgayHuy: new Date(),
          NguoiHuy: req.user.role === "reader" ? "ƒë·ªôc gi·∫£" : "th·ªß th∆∞",
          GhiChu:
            req.body.lyDo ||
            "H·ªßy b·ªüi " + (req.user.role === "reader" ? "ƒë·ªôc gi·∫£" : "th·ªß th∆∞"),
        },
      }
    );

    // Ho√†n tr·∫£ s·ªë l∆∞·ª£ng s√°ch n·∫øu c·∫ßn thi·∫øt
    if (datSach.TrangThai === "cho_duyet") {
      // V·ªõi tr·∫°ng th√°i "cho_duyet", s·ªë l∆∞·ª£ng s√°ch ƒë√£ b·ªã tr·ª´ khi t·∫°o phi·∫øu ƒë·∫∑t
      await sachCollection.updateOne(
        { MaSach: datSach.MaSach },
        { $inc: { SoLuong: datSach.SoLuong } }
      );
      console.log(`üìö Ho√†n tr·∫£ ${datSach.SoLuong} cu·ªën s√°ch ${datSach.MaSach}`);
    }

    console.log("‚úÖ H·ªßy ƒë·∫∑t s√°ch th√†nh c√¥ng!");
    const response = {
      message: "H·ªßy ƒë·∫∑t s√°ch th√†nh c√¥ng!",
      maDat: datSach.MaDat,
      tenSach: datSach.TenSach || "N/A",
      soLuongHoanTra: datSach.TrangThai === "cho_duyet" ? datSach.SoLuong : 0,
    };
    console.log("üîç Response s·∫Ω g·ª≠i:", response);
    res.json(response);
  } catch (err) {
    console.error("‚ùå L·ªói h·ªßy ƒë·∫∑t s√°ch:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!", error: err.message });
  }
});

// Export router
module.exports = router;
