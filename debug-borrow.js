const axios = require("axios");

async function testBorrowAPI() {
  try {
    // Th·ª≠ ƒëƒÉng nh·∫≠p tr∆∞·ªõc
    console.log("üîê Th·ª≠ ƒëƒÉng nh·∫≠p...");
    const loginResponse = await axios.post(
      "http://localhost:5000/api/login/reader",
      {
        MaDocGia: "TEST001",
        MatKhau: "password123",
      }
    );

    console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", loginResponse.data);
    const token = loginResponse.data.token;
    const userInfo = loginResponse.data.user;

    // L·∫•y danh s√°ch s√°ch c√≥ th·ªÉ m∆∞·ª£n
    console.log("\nüìö L·∫•y danh s√°ch s√°ch...");
    const booksResponse = await axios.get("http://localhost:5000/api/sach", {
      headers: { Authorization: `Bearer ${token}` },
    });

    console.log("üìã Response from /api/sach:", booksResponse.data);
    console.log(
      `üìñ T√¨m th·∫•y ${booksResponse.data?.length || "undefined"} s√°ch`
    );

    // Ki·ªÉm tra n·∫øu data l√† object th√¨ l·∫•y array t·ª´ ƒë√≥
    const books = booksResponse.data.sachs || [];
    console.log(`üìö Danh s√°ch s√°ch th·ª±c t·∫ø:`, books.length);

    const availableBook = books.find(
      (book) => (book.SoLuongCon || book.SoLuong) > 0
    );

    if (!availableBook) {
      console.log("‚ùå Kh√¥ng c√≥ s√°ch n√†o c√≥ s·∫µn ƒë·ªÉ m∆∞·ª£n");
      return;
    }

    console.log(
      "üìï S√°ch c√≥ th·ªÉ m∆∞·ª£n:",
      availableBook.TenSach,
      "C√≤n:",
      availableBook.SoLuongCon || availableBook.SoLuong
    );

    // Th·ª≠ m∆∞·ª£n s√°ch
    console.log("\nüîÑ Th·ª≠ m∆∞·ª£n s√°ch...");
    const borrowResponse = await axios.post(
      "http://localhost:5000/api/theodoimuonsach",
      {
        MaSach: availableBook.MaSach || availableBook._id,
        NgayHenTra: new Date(
          Date.now() + 14 * 24 * 60 * 60 * 1000
        ).toISOString(),
      },
      {
        headers: { Authorization: `Bearer ${token}` },
      }
    );

    console.log("‚úÖ M∆∞·ª£n s√°ch th√†nh c√¥ng:", borrowResponse.data);
  } catch (error) {
    console.error("‚ùå L·ªói:", error.response?.data || error.message);
    console.error("Status:", error.response?.status);
    console.error("Headers:", error.response?.headers);
  }
}

testBorrowAPI();
